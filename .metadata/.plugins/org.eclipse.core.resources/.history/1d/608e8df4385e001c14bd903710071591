package optimalmerge.greedy;

public class OptimalMerge {

	int[] a;
	int minComputation = 0;
	int[] minHeap;
	int length = 0;

	public static void main(String[] args) {
		OptimalMerge merge = new OptimalMerge();

		int[] files = { 4, 8, 6, 2 };
		merge.setA(files);

		merge.minComputation = merge.findMinComputation();
		System.out.println("Min computation = " + merge.getMinComputation());
	}

	private int getMinComputation() {
		int[] minHeap = createMinHeap();
		System.out.println("min heap is: ");
		for(int i=1; i<length; i++) {
			System.out.print(minHeap[i]+" ");
		}
		System.out.println();
		return this.minComputation;
	}

	private int[] createMinHeap() {
		length = a.length+1;
		minHeap = new int[length];
		minHeap[0] = Integer.MAX_VALUE;
		for (int i = 1; i < minHeap.length; i++) {
			minHeap[i] = a[i - 1];
		}

		for (int i = 2; i < length; i++) {
			int t = i;
			int j = t / 2;
			while (j >= 1) {
				if (minHeap[t] < minHeap[j]) {
					int k = minHeap[j];
					minHeap[j] = minHeap[t];
					minHeap[t] = k;
				}
				t=j;
				j/=2;
			}
		}
		return minHeap;
	}
	
	private int popHeap() {
		int element = minHeap[1];
		minHeap[1] = minHeap[length-1];
		length--;
		return  element;
	}
	
	private void insertHeap(int e) {
		length++;
		minHeap[length-1]=e;
		heapify();
	}

	private int findMinComputation() {
		// TODO Auto-generated method stub
		return 0;
	}

	private void setA(int[] a) {
		this.a = a;
	}

}
